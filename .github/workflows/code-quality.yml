name: Code Quality

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  REGISTRY: ghcr.io

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: astral-sh/setup-uv@v5
        id: setup-uv
        with:
          python-version: "3.13"
          enable-cache: true
          cache-dependency-glob: "**/uv.lock"
          cache-suffix: ${{ github.run_id }}-${{ github.run_attempt }}

      - name: Install dependencies
        run: |
          uv --directory api sync
          uv --directory workers sync

  lint_api:
    needs: setup
    name: Lint API
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v5
        with:
          python-version: "3.13"
          enable-cache: true
          cache-dependency-glob: "**/uv.lock"
          cache-suffix: ${{ github.run_id }}-${{ github.run_attempt }}

      - name: Run API linting
        working-directory: ./api
        run: |
          uv run --active ruff check --config ../ruff.toml .
          uv run --active ruff check --select I --config ../ruff.toml .
          uv run --active ruff format --check --config ../ruff.toml .

  lint_workers:
    needs: setup
    name: Lint Workers
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v5
        with:
          python-version: "3.13"
          enable-cache: true
          cache-dependency-glob: "**/uv.lock"
          cache-suffix: ${{ github.run_id }}-${{ github.run_attempt }}

      - name: Run Workers linting
        working-directory: ./workers
        run: |
          uv run --active ruff check --config ../ruff.toml .
          uv run --active ruff check --select I --config ../ruff.toml .
          uv run --active ruff format --check --config ../ruff.toml .

  test_api:
    needs: setup
    name: Test API Unit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v5
        with:
          python-version: "3.13"
          enable-cache: true
          cache-dependency-glob: "**/uv.lock"
          cache-suffix: ${{ github.run_id }}-${{ github.run_attempt }}

      - name: Run API tests
        working-directory: ./api
        run: |
          uv run --active pytest \
            --cov=api \
            --cov-branch \
            --cov-report=xml \
            tests

      - uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: true
          files: ./api/coverage.xml
          flags: unittests
          token: ${{ secrets.CODECOV_TOKEN }}

  test_workers:
    needs: setup
    name: Test Workers Unit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v5
        with:
          python-version: "3.13"
          enable-cache: true
          cache-dependency-glob: "**/uv.lock"
          cache-suffix: ${{ github.run_id }}-${{ github.run_attempt }}

      - name: Run Workers tests
        working-directory: ./workers
        run: |
          uv run --active pytest \
            --cov=workers \
            --cov-branch \
            --cov-report=xml \
            tests/unit

      - uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: true
          files: ./workers/coverage.xml
          flags: unittests
          token: ${{ secrets.CODECOV_TOKEN }}

  test_workers_component:
    name: Test Workers Component
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code (needed for Codecov to match reports)
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull coverage test image
        run: |
          docker pull ${{ vars.COVERAGE_TEST_IMAGE }}

      - name: Run component tests
        run: |
          docker run --name test-runner \
            -v ${{ github.workspace }}/workers/src:/app/src \
            -v ${{ github.workspace }}/workers/tests/component:/app/tests/component \
            ${{ vars.COVERAGE_TEST_IMAGE }} \
            python3 -m pytest --cov=workers --cov-report=xml tests/component

      - name: Extract coverage report
        run: |
          docker cp test-runner:/app/coverage.xml coverage.xml
          docker rm test-runner

      - name: Upload to Codecov
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: true
          files: coverage.xml
          flags: componenttests
          token: ${{ secrets.CODECOV_TOKEN }}
